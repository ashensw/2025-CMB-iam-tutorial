openapi: 3.0.3
info:
  title: Pizza Shack API
  description: >-
    Pizza ordering API with IETF Agent Authentication support for WSO2 Choreo deployment.
    Supports both agent tokens and OBO tokens for secure pizza ordering.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: WSO2 Choreo
  url: https://choreo.dev
servers:
  - url: http://localhost:8000
  - url: https://your-choreo-endpoint.com
tags:
  - name: menu
    description: Pizza menu operations
  - name: orders
    description: Order management operations
  - name: system
    description: System status and health checks
paths:
  /:
    get:
      summary: API information
      description: Get basic API information and endpoints
      operationId: getApiInfo
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  version:
                    type: string
                  description:
                    type: string

  /health:
    get:
      summary: Health check
      description: Health check endpoint for monitoring
      operationId: healthCheck
      tags:
        - system
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string

  /api/menu:
    get:
      summary: Get pizza menu
      description: Retrieve available pizza menu items with optional filtering
      operationId: getMenu
      tags:
        - menu
      parameters:
        - name: category
          in: query
          description: Filter by pizza category
          schema:
            type: string
            enum: [classic, premium, meat, vegetarian]
        - name: price_range
          in: query
          description: Filter by price range
          schema:
            type: string
            enum: [budget, mid-range, premium]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MenuItem"

  /api/orders:
    post:
      summary: Create new order
      description: Place a new pizza order (requires order:write scope)
      operationId: createOrder
      tags:
        - orders
      security:
        - BearerAuth: ['order:write']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "401":
          description: Unauthorized
        "403":
          description: Insufficient permissions

    get:
      summary: Get user orders
      description: Retrieve orders for authenticated user (requires order:read scope)
      operationId: getUserOrders
      tags:
        - orders
      security:
        - BearerAuth: ['order:read']
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"

  /api/orders/{order_id}:
    get:
      summary: Get specific order
      description: Retrieve specific order details (requires order:read scope)
      operationId: getOrder
      tags:
        - orders
      security:
        - BearerAuth: ['order:read']
      parameters:
        - name: order_id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "404":
          description: Order not found

  /api/system/status:
    get:
      summary: System status
      description: Detailed system status (no specific scope required)
      operationId: getSystemStatus
      tags:
        - system
      security:
        - BearerAuth: []
      responses:
        "200":
          description: System status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  agent_id:
                    type: string
                  database:
                    type: string

# Admin endpoints removed - not used by current pizza-shack frontend

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Asgardeo JWT token (Agent or OBO token) with scope-based authorization.
        
        Available scopes:
        - order:read - Read access to user orders
        - order:write - Create and modify orders

  schemas:
    MenuItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        image_url:
          type: string
        ingredients:
          type: array
          items:
            type: string
        size_options:
          type: array
          items:
            type: string
        available:
          type: boolean

    OrderItem:
      type: object
      required:
        - menu_item_id
        - quantity
      properties:
        menu_item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
        size:
          type: string
          default: medium
        special_instructions:
          type: string

    CreateOrderRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        customer_info:
          type: object

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: string
        user_id:
          type: string
        agent_id:
          type: string
        items:
          type: array
        total_amount:
          type: number
          format: float
        status:
          type: string
        token_type:
          type: string
        created_at:
          type: string
          format: date-time